@{
    ViewData["Title"] = Model.Title;
    var submission = Model.Submissions.FirstOrDefault(x => x.Latest is true);
    var playedCharacters = submission.PlayedCharacters;
    var floors = submission.PlayedCharacters.SelectMany(x => x.PlayedFloors).ToList();
    var culture = new System.Globalization.CultureInfo("en-US");
    var submitters = Model.Submissions.Select(x => x.UserName).ToList();
    var twoPlayerMode = Model.Submissions.Any(x => x.IsTwoPlayerMode) ? true : false;
}

@model NldbVideo

<h1>@Model.Title</h1>

<div>
    <h2>Episode Overview</h2>

    <div id="video-page-tables">
        <table>
            <thead>
                <tr>
                    <th>Floor</th>
                    <th>Items</th>
                    <th colspan="2">Transformation</th>
                </tr>
            </thead>
            <tbody>
                @for (int c = 0; c < playedCharacters.Count; c++)
                {
                <tr>
                    @if (!string.IsNullOrEmpty(playedCharacters[c].Seed))
                    {
                    <td colspan="4">Run @playedCharacters[c].RunNumber (Seed: @playedCharacters[c].Seed)</td>
                    }
                    else
                    {
                        <td colspan="4">Run @playedCharacters[c].RunNumber</td>
                    }
                </tr>
                    @for (int f = 0; f < playedCharacters[c].PlayedFloors.Count; f++)
                    {
                        <tr>
                            <td>(@playedCharacters[c].PlayedFloors[f].FloorNumber) @playedCharacters[c].PlayedFloors[f].Floor.Name</td>
                            <td style="position: relative">
                                @foreach (var gameplayEvent in playedCharacters[c].PlayedFloors[f].GameplayEvents)
                                {
                                    if (gameplayEvent.EventType == GameplayEventType.ItemCollected)
                                    {
                                        var item = gameplayEvent.Resource1;
                                        var source = gameplayEvent.Resource2;

                                        <isaac-image resource="item"></isaac-image>

                                        @if (source != null)
                                        {
                                            <div class="popup c">
                                                <b>
                                                    Item Collected:<br />
                                                    @item.Name
                                                </b>
                                                <hr />
                                                <isaac-image resource="source"></isaac-image> ⟹ <isaac-image resource="item"></isaac-image><br />
                                                From: @source.Name

                                                @if (twoPlayerMode && gameplayEvent.Player.HasValue)
                                                {
                                                    <hr />
                                                    <span>Collected by:</span><br />
                                                    <span class="@(gameplayEvent.Player.Value == 1 ? "player-one" : "player-two")">
                                                        <strong>Player @gameplayEvent.Player.Value.ToString()</strong>
                                                    </span>
                                                }
                                            </div>
                                        }
                                    }
                                }
                            </td>
                            <td style="position: relative">
                                @foreach (var gameplayEvent in playedCharacters[c].PlayedFloors[f].GameplayEvents)
                                {
                                    if (gameplayEvent.EventType == GameplayEventType.TransformationProgress && gameplayEvent.Resource2 != null && gameplayEvent.Resource3 != null)
                                    {
                                        <isaac-image resource="gameplayEvent.Resource2"></isaac-image>

                                        <div class="popup c">
                                            <b>Transformation Progress:</b><br />
                                            <hr />

                                            <isaac-image resource="gameplayEvent.Resource1"></isaac-image><br />
                                            @gameplayEvent.Resource1.Name collected<br />
                                            <hr />

                                            @gameplayEvent.Resource3 / 3 items necessary for @gameplayEvent.Resource2.Name
                                        </div>
                                    }
                                }
                            </td>
                            <td style="position: relative">
                                @foreach (var gameplayEvent in playedCharacters[c].PlayedFloors[f].GameplayEvents)
                                {
                                    if (gameplayEvent.EventType == GameplayEventType.TransformationComplete && gameplayEvent.Resource2 != null)
                                    {
                                        <isaac-image resource="gameplayEvent.Resource2"></isaac-image>

                                        <div class="popup c">
                                            <b>Transformation Complete!</b>
                                            <hr />

                                            <isaac-image resource="gameplayEvent.Resource2"></isaac-image><br />
                                            NL successfully transformed into @gameplayEvent.Resource2.Name
                                        </div>
                                    }
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <table>
            <thead>
                <tr>
                    <td>Contributed By</td>
                    <td>
                        @for (int i = 0; i < submitters.Count; i++)
                        {
                            @if (i < submitters.Count - 1)
                            {
                                <span>
                                    @submitters[i],
                                </span>
                            }
                            else
                            {
                                <span>
                                    @submitters[i]
                                </span>
                            }
                        }
                    </td>
                </tr>
                <tr>
                    <td>Release Date</td>
                    <td>@Model.Published</td>
                </tr>
                <tr>
                    <td>Video Length</td>
                    <td>@Model.Duration.Minutes minutes, @Model.Duration.Seconds seconds</td>
                </tr>
                <tr>
                    <td>Youtube Link</td>
                    <td><a href="https://www.youtube.com/watch?v=@Model.Id">https://www.youtube.com/watch?v=@Model.Id</a></td>
                </tr>
                @if (Model.Thumbnails.Count > 0)
                {
                    <tr>
                        <td>Thumbnails</td>
                        <td>
                            <ul>
                                @foreach (var t in Model.Thumbnails)
                                {
                                    <li>@t.Width x @t.Height: @t.Url</li>
                                }
                            </ul>
                        </td>
                    </tr>
                }
            </thead>
        </table>
    </div>


    <hr />

    <h2>Progress throughout the Episode</h2>
    <div style="display: flex;">
        @for (int i = 0; i < floors.Count; i++)
        {
            var floor = floors[i];
            var videoLength = (double)Model.Duration.Ticks;
            var floorLength = (double)TimeSpan.FromSeconds(floor.Duration).Ticks - 0.01;
            var percentage = (100 * floorLength) / videoLength;

            <div style="height: 40px; background-color: @floor.Floor.Color; width: @(percentage.ToString(culture))%; position: relative;" class="floor-progress r">
                @{
                    var floorHasBossfights = floor.GameplayEvents.Any(x => x.EventType == GameplayEventType.Bossfight);
                    var bossfights = floorHasBossfights ? floor.GameplayEvents.Where(x => x.EventType == GameplayEventType.Bossfight).ToList() : new List<GameplayEvent>();
                    var playedCharacter = playedCharacters[floor.RunNumber - 1].GameCharacter;
                }
                @if (floorHasBossfights)
                {
                    foreach (var bossfight in bossfights)
                    {
                        <div class="display-inline">
                            <isaac-image resource="bossfight.Resource1"></isaac-image>
                        </div>
                    }
                }
                <div class="popup c">
                    <h4>@floor.Floor.Name</h4>
                    @{
                        var minutes = (int)Math.Floor((float)floor.Duration / 60.0f);
                        var seconds = floor.Duration - minutes * 60;
                    }
                    <p>~ @minutes minute@(minutes == 1 ? string.Empty : "s"), @seconds second@(seconds == 1 ? string.Empty : "s")</p>
                    <hr />

                    @if (!floorHasBossfights)
                    {
                        <p>No bossfights on this floor</p>
                    }
                    else
                    {
                        for (int j = 0; j < bossfights.Count; j++)
                        {
                            <p>
                                @if (bossfights.Count is 1)
                                {
                                    <span>Bossfight:</span><br />
                                }
                                else
                                {
                                    <span>Bossfight @((j + 1).ToString()):</span><br />
                                }

                                <strong>@bossfights[j].Resource1.Name</strong>
                                <isaac-image resource="bossfights[j].Resource1"></isaac-image>
                            </p>
                        }
                    }

                    @if (floor.DiedFrom != null)
                    {
                        <hr />
                        <p>
                            @playedCharacter.Name @(playedCharacter.Name == "Jacob & Esau" ? "were" : "was") Killed by:<br />
                            <isaac-image resource="floor.DiedFrom"></isaac-image><br />
                            @floor.DiedFrom.Name
                        </p>
                    }
                    @if (floor.GameplayEvents.Any(x => x.EventType == GameplayEventType.WonTheRun))
                    {
                        <hr />
                        <p>
                            @playedCharacter.Name won the run!
                        </p>
                    }
                </div>
            </div>
        }
    </div>

    <hr />

    <h2>Transformation Progress</h2>

    @{
        // extract all transformation data from the episode, sorted by run number and transformation
        var transformationProgressEvents = floors
            .SelectMany(x => x.GameplayEvents)
            .Where(x => x.EventType == GameplayEventType.TransformationProgress)
            .ToList();

        // stores transformation name, and a tuple of (transformation + items + floor) for each run
        var transformationData = new List<Dictionary<string, (IsaacResource, List<IsaacResource>)>>();

        for (int i = 0; i < transformationProgressEvents.Count; i++)
        {
            // check if new run started
            if (i == 0 || transformationProgressEvents[i].RunNumber > transformationProgressEvents[i - 1].RunNumber)
            {
                transformationData.Add(new Dictionary<string, (IsaacResource, List<IsaacResource>)>());
            }

            var transformation = transformationProgressEvents[i].Resource2;
            var item = transformationProgressEvents[i].Resource1;

            if (transformation is null)
            {
                continue;
            }

            if (transformationData.Last().TryGetValue(transformation.Name, out var items))
            {
                items.Item2.Add(item);
            }
            else
            {
                transformationData.Last().Add(transformation.Name, (transformation, new List<IsaacResource>() { item }));
            }
        }
    }

    <div style="margin: 0 auto; display: flex; justify-content: center;">
        <div id="transformation-stats-wrapper">
        @{ int runNumber = 1; }
            @foreach (var run in transformationData)
            {
                foreach (var runTransformationData in run.Values)
                {
                    <div class="transformation-stats-set">
                        @foreach (var item in runTransformationData.Item2)
                        {
                            <div class="transformation-stats-block"></div>
                        }
                        <div class="transformation-stats-block">
                            <isaac-image resource="runTransformationData.Item1"></isaac-image>
                            <div class="popup c" style="width: 350px;">
                                <p>
                                    <strong>
                                        @runTransformationData.Item1.Name
                                        @(transformationData.Count > 1 ? $"- Run {runNumber.ToString()}" : string.Empty)
                                    </strong>
                                    <br />
                                    <isaac-image resource="runTransformationData.Item1"></isaac-image>
                                </p>
                                <hr />
                                <p>
                                    Collected Items (@runTransformationData.Item2.Count / 3):<br />
                                    @foreach (var item in runTransformationData.Item2)
                                    {
                                        <div class="display-inline transformation-stats-item-box">
                                            <isaac-image resource="item"></isaac-image><br />
                                            @item.Name
                                        </div>
                                    }
                                </p>
                                <p>
                                    @if (runTransformationData.Item2.Count < 3)
                                    {
                                        <span class="orange"><strong>Transformation Incomplete</strong></span>
                                    }
                                    else
                                    {
                                        <span class="green"><strong>Transformation Complete!</strong></span>
                                    }
                                </p>
                            </div>
                        </div>

                    </div>
                }

                runNumber++;
            }
        </div>
    </div>

    <hr />

    <h2>Played Characters</h2>
    @for (int i = 0; i < playedCharacters.Count; i++)
    {
        var c = playedCharacters[i];
        <div class="played-character">
            <p>
                @c.GameCharacter.Name<br />
                <isaac-image resource="c.GameCharacter"></isaac-image>
            </p>

            <hr />

            <p>
                @{
                    var numberOfCollectedItems = c.PlayedFloors.SelectMany(x => x.GameplayEvents).Count(x => x.EventType == GameplayEventType.ItemTouched || x.EventType == GameplayEventType.ItemCollected);
                    var numberOfVisitedFloors = c.PlayedFloors.Count;
                    var numberOfBossfights = c.PlayedFloors.SelectMany(x => x.GameplayEvents).Count(x => x.EventType == GameplayEventType.Bossfight);
                }
                @c.GameCharacter.Name went through 
                @numberOfVisitedFloors floor@(numberOfVisitedFloors is 1 ? string.Empty : "s"), 
                collected @numberOfCollectedItems item@(numberOfCollectedItems is 1 ? string.Empty : "s") 
                and fought @numberOfBossfights boss@(numberOfBossfights is 1 ? string.Empty : "es").
            </p>

            @if (c.DiedFrom is null)
            {
                <p>
                    @c.GameCharacter.Name survived the Run!
                </p>
            }
            else
            {
                <p>
                    @c.GameCharacter.Name @(c.GameCharacter.Name == "Jacob & Esau" ? "were" : "was") killed by<br />
                    <isaac-image resource="c.DiedFrom"></isaac-image><br />
                    @c.DiedFrom.Name
                </p>
            }
        </div>
    }

    <hr/>

    <h3>Quotes from this episode</h3>
    <div id="quotes"></div>

    @*placeholder at the bottom*@
    <div style="width: 100%; height: 300px"></div>
</div>

@section Scripts {
    <script src="~/js/dist/video_quotes.min.js" asp-append-version="true"></script>
}

